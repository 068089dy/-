### 1.变量
基本变量类型
```
bool

string

int  int8  int16  int32  int64
uint uint8 uint16 uint32 uint64 uintptr

byte // uint8 的别名

rune // int32 的别名
    // 表示一个 Unicode 码点

float32 float64

complex64 complex128
```
#### 变量声明
在函数体内外都可以使用
```
var a int
var a int = 1
var a = 1 #由go自己判断变量类型
var a, b int = 1, 2
var (
	a int = 2
	s string = "str"
)
```
下面这种方法只能在函数体内申明
```
a := 1    #函数体内声明
a int := 1
```
#### 常量
把关键字var改为const即可，常量不能用:=声明。
### 2.函数
基本格式
```
func 函数名 (参数) 返回类型 {
  ...
}
```
eg:
```
//求两数之和
func add(x int, y int) int {  //参数也可以写为(x, y int)
	return x + y
}

func main() {
	fmt.Println(add(42, 13))
}
```
函数支持多值返回
### 3.格式化打印printf
```
fmt.Printf("v is of type %T\n", g)
%T：变量类型
```
### 4.结构体
基础
```
type Test struct{
	x int
	y int
}
//使用文法
t := Test{1, 2}  //t.x=1, t.y=2
t := Test[]  //t.x=0, t.y=0
t := Test{x:1} //t.x=1, t.y=0
```
需要注意的是，结构体变量可以通过"t.x = ..."的方法改变变量值，对于一个结构提指针p，也可以通过"p.x = ..."的方法改变，这样做主要是为了方便，本质上与"(*p).x = ..."没有区别。

c语言中也有结构体，go中的结构体和c语言中的差不多，但是go中的结构体中可以有方法（函数），这就有点类的味道了。
```
type Test struct{
	  x int
	  y int
}

//将结构体Test中的x和y相加
//接收者为Test变量
func (t Test) Add() int { 
	  return t.x + t.y
}

//将结构体Test中的x和y相加
//接收者为Test指针
func (t *Test) Add2() int { 
	  return t.x + t.y
}

func main() {
	  test := Test{1, 2}
	  fmt.Println(test.Add()) //3
  	test2 := &Test{3, 4}
  	fmt.Println(test2.Add2()) //7
}

3
7
```
### 5.接口
```
```
